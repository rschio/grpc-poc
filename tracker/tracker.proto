syntax = "proto3";


option go_package= "github.com/rschio/grpc-poc/tracker/proto;proto";

package proto;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";


message SearchRequest {
	string tracking_code = 1;
}

// Event doc...
message Event {
	google.protobuf.Timestamp date = 1;
	string status = 2;
	string place = 3;
}

message SearchResponse {
	string tracking_code = 1;
	repeated Event events = 2;
}

message SearchBatchRequest {
	repeated string tracking_codes = 1;
}

message Credentials {
	string user = 1;
	string pass = 2;
}

message Token {
	string value = 1;
	int64 expires_in = 2;
}

//// Service without annotations to the gateway.
//service Tracker {
//	rpc Login(Credentials) returns (Token) {}
//	rpc Search(SearchRequest) returns (SearchResponse) {}
//	rpc SearchBatch(SearchBatchRequest) returns (stream SearchResponse) {}
//}

// Tacker is a tracker service.
service Tracker {
	// This comment is used to document the stub generated by gRPC 
	// and also the openAPI auto generated.
	//
	// Login authenticates a user and return an access token.
	rpc Login(Credentials) returns (Token) {
		option (google.api.http) = {
			post: "/v1/login"
			body: "*"
		};
	}
	// Search searches by a tracking code and returns it's events.
	rpc Search(SearchRequest) returns (SearchResponse) {
		option (google.api.http) = {
			get: "/v1/search/{tracking_code}"
		};
	}
	// SearchBatch searches one or more tracking codes and returns a stream of 
	// SearchResponses.
	rpc SearchBatch(SearchBatchRequest) returns (stream SearchResponse) {
		option (google.api.http) = {
			post: "/v1/searchbatch"
			body: "*"
		};
	}
}
